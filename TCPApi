/** An API giving a full range of TCP interaction,
specifically for text and images.
*
*/
package chat;

import java.io.*;
import java.util.*;
import java.net.*;

/**
 * @author Liam Pierce
 */
public class TCPApi {
    int connectionKey = 0;
    int listenerKey = 0;
    boolean Log = true;
    private List<InetAddress> Servers = new ArrayList<>();
    private List<Socket> Connections = new ArrayList<>();
    private List<BufferedReader> Readers = new ArrayList<>();
    private List<List<FuncStore>> ListenerActions = new ArrayList<>();
    
    
    public void AddServer(InetAddress IP){
        Servers.add(IP);
    }
    
    int Connection(IP Host){
        try{
            Connections.add(new Socket(Host.Converter(),Host.GetPort()));
            connectionKey += 1;
        }catch(Exception E){
            if (Log == true){
                System.out.println("Connection to server: " + Host.GetIP() +
                        " failed.");
            }
        }
        return connectionKey;
    }
    
    public void Send(int ConnectionKey,String Send){
        Socket To = Connections.get(ConnectionKey);
        DataOutputStream Output;
        try{
            Output = new DataOutputStream(To.getOutputStream());
            Output.writeBytes("@Start:" + Send + "\n");
        }catch(IOException E){
            if (Log == true){
                System.out.println("Message sending failed.");
            }
        }
    }
    
    public int CreateListener(int Port,FuncStore Action){
        listenerKey = listenerKey + 1;
        int Key = listenerKey;
        Socket Listener;
        InputStreamReader R = null;
        try{
            Listener = new ServerSocket(Port).accept();
            if (Log == true){
                System.out.println("ServerSocket created successfully.");
            }
            R = new InputStreamReader(Listener.getInputStream());
        }catch(IOException E){
            if (Log == true){
                System.out.println("Socket creation failed: " + E);
            }
        }
        
        BufferedReader B = new BufferedReader(R);
        Readers.add(B);
        
        CreateListenerAction(Action,Key);
        Timer Reader = new Timer();
        try{
            Reader.scheduleAtFixedRate(new TimerTsk(ListenerActions.get(Key),B.readLine()),10,300);
        }catch(IOException E){
            if (Log == true){
                System.out.println("Error reading line.");
            }
        }
        return listenerKey;
    }
    
    private void CreateListenerAction(FuncStore Action,int ListenerKey){
        ListenerActions.get(ListenerKey).add(Action);
    }
    
    public void InitCProtocol(int Server){
        CreateListener(Server,new FuncStore("Protocol"){
            @Override
            void Run(String Text){
                
            }
        });
        Send(Server,"@Connect?");
        
    }
   
    
    public TCPApi(){
    }
}
